import numpy as np
import matplotlib.pyplot as plt

t = 0  # tempo inicial
lq = 0  # número de elementos na fila
ls = 1  # número de elementos no servidor
k1 = 0  # variável auxiliar para chegadas
k2 = 0  # variável auxiliar para partidas
k = 0  # número de partidas
l = 5000
c = 500000

lambda1 = 40  # taxa média de chegada
mu1 = 100  # taxa média de partida

chegadas = np.random.exponential(1 / lambda1, 100000)  # vetor de chegadas
partidas = np.random.exponential(1 / mu1, 100000)  # vetor de partidas

tc = [0]  # tempo de chegadas
tp = []  # tempo de partidas
ts = []  # tempo no sistema

ta = t + chegadas[k1]  # próxima chegada
td = t + partidas[k2]  # próxima partida
t = np.minimum(ta, td)  # próximo tempo de execução

while t < 5000:  # tempo limite de simulação

    if ta < td:  # evento de chegada
        k1 += 1
        ta = []  # apaga o tempo de chegada atual
        if ls == 1:  # servidor ocupado
            lq += 1  # aumenta a fila
            if k1 < len(chegadas):
                ta = t + chegadas[k1]  # gera nova chegada
            else:
                ta = np.inf
            tc.append(t)  # armazena tempo atual de chegada
        else:  # servidor desocupado
            ls = 1  # ocupa o servidor
            k2 += 1
            if k2 < len(partidas):
                td = t + partidas[k2]  # gera nova partida
            else:
                td = np.inf
            if k1 < len(chegadas):
                ta = t + chegadas[k1]  # gera nova chegada
            else:
                ta = np.inf
            tc.append(t)  # armazena tempo atual de chegada
    elif ta == td:  # chegada e partida simultânea
        tc.append(t)  # armazena o tempo atual de chegada
        tp.append(t)  # armazena o tempo atual de partida
        k += 1  # incrementa a partida
        ts.append(tp[-1] - tc[-1])  # calcula o tempo no sistema

        k1 += 1
        k2 += 1
        if k2 < len(partidas):
            td = t + partidas[k2]  # calcula a próxima partida
        else:
            td = np.inf
        if k1 < len(chegadas):
            ta = t + chegadas[k1]  # calcula a próxima chegada
        else:
            ta = np.inf
    else:  # evento de partida
        td = []  # apaga o tempo de partida
        k += 1  # incrementa o número de partidas

        if lq > 0:  # existem pacotes na fila
            tp.append(t)  # armazena o tempo da partida
            ts.append(tp[-1] - tc[k - 1])  # calcula o tempo no sistema
            lq -= 1  # diminui a fila em 1
            k2 += 1
            if k2 < len(partidas):
                td = t + partidas[k2]  # calcula a próxima partida
            else:
                td = np.inf
        else:  # não há pacotes na fila
            tp.append(t)  # armazena o tempo da partida
            ts.append(tp[-1] - tc[k - 1])  # calcula o tempo no sistema
            td = np.inf  # coloca um valor muito grande para a próxima partida
            ls = 0  # esvazia o servidor

    t = np.minimum(ta, td)  # calcula o tempo mínimo entre chegada e partida


eq = lambda1 * np.mean(ts)
ts1 = l/c
ew = lambda1 * tw
rho = lambda1 / mu1
tq = 1/(mu1 - lambda1)
tw = tq - ts1

print("Fator de utilização (rho):", rho)
#print("Tempo médio no sistema (W):", np.mean(ts), "segundos")

print("Tempo médio na fila (Wq):", tw, "segundos")
print("Tempo médio no comutador (tq):", tq, "segundos")


#print("Número médio de pacotes no sistema (L):", eq, "pacotes")
#print("Número médio de pacotes na fila (Lq):", ew, "pacotes")
